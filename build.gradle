buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
    distributionUrl = 'http://services.gradle.org/distributions/gradle-2.2-bin.zip'
}


def isReleaseBuild() {
    return currentVersion.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return nexusUser
}

def getRepositoryPassword() {
    return nexusPassword
}

subprojects { p ->

    ext {
        pomFilePath = "${project.projectDir}/build/pom.xml"
        pomFile = file(pomFilePath)
    }

    println("POM path: " + pomFilePath)

    configurations {
        pom
    }

    group = 'uk.camsw.rx'
    version = currentVersion

    apply plugin: 'idea'
    apply plugin: 'java'


    apply plugin: 'maven'
    apply plugin: 'signing'


    afterEvaluate { project ->
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.groupId = GROUP
                    pom.artifactId = project.name
                    pom.version = currentVersion

                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                    snapshotRepository(url: getSnapshotRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }

                    pom.project {
                        name project.name
                        packaging POM_PACKAGING
                        description project.name
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENCE_NAME
                                url POM_LICENCE_URL
                                distribution POM_LICENCE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            }
        }

        signing {
            required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        task sourceJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives jar
            archives sourceJar
            archives javadocJar
        }
    }


    idea {
        module {
            inheritOutputDirs = false
            outputDir = file('.idea-classes')
            testOutputDir = file('.idea-test-classes')
            downloadJavadoc = true
            downloadSources = true
            jdkName = '1.8'
        }
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }


    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.7'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.11.1'
        testCompile 'junit:junit:4.11'
        testCompile 'org.assertj:assertj-core:3.0.0'
        testRuntime 'ch.qos.logback:logback-classic:1.1.2'
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
        all*.exclude group: 'javax.jms', module: 'jms'
        all*.exclude group: 'com.sun.jmx', module: 'jmxri'
        all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
    }
    test {
        testLogging {
            events 'started', 'passed'
        }
    }

}





